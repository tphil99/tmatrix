#' make unary + a transpose operator
#' 
#' @export
#' @examples
#' x <- tmatrix(1,2,NULL,3,4,5,6)
#' +x
`+.tmatrix` <- function(X,Y) {
    if (missing(Y)) {
        t(X)
    } else {
        structure(unclass(X)+unclass(Y), class = oldClass(X))
    }
}

#' make unary- an inverse operator
# 
# NB: the default unary- is potentially useful, use -I(X) to use it
#' @export
#' @examples
#' x <- tmatrix(1,2,NULL,3,4)
#' -x
#' -I(x)
`-.tmatrix` <- function(X,Y) {
    if (missing(Y)) {
        if (oldClass(X)[[1]] == "AsIs") {
           structure(-unclass(X), class = tail(oldClass(X), -1))
        } else {
            structure(solve(X), class = oldClass(X))
        }
    } else {
        structure(unclass(X)+unclass(Y), class = oldClass(X))
    }
}

#' make %% a matmul operator that acts in reverse
# 
#' @export
`%%.tmatrix` <- function(X,Y) {
    structure(unclass(Y)%*%unclass(X), class = oldClass(X))
}

# eg. y%%+X%%-(X%%+X)
